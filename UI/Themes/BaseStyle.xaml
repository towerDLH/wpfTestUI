<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:UI.Themes"
                    xmlns:cnv="clr-namespace:UI.Convert"
                     xmlns:sys="clr-namespace:System;assembly=mscorlib">
    <!--Window窗体-->
    <SolidColorBrush x:Key="WindowBackground" Color="#007ACB"></SolidColorBrush>
    <SolidColorBrush x:Key="WindowInnerBackground" Color="Transparent"></SolidColorBrush>
    <SolidColorBrush x:Key="WindowBorderBrush" Color="#920892"></SolidColorBrush>
    <DropShadowEffect x:Key="WindowDropShadow" Color="#F472F4" BlurRadius="8" ShadowDepth="0" Direction="0" Opacity="0.7" />
    <SolidColorBrush x:Key="CaptionForeground" Color="White"></SolidColorBrush>
    <LinearGradientBrush x:Key="CaptionBackground" StartPoint="0.5,0" EndPoint="0.5,1">
        <GradientStop Color="#571457" Offset="0"/>
        <GradientStop Color="#6A196A" Offset="1"/>
    </LinearGradientBrush>
    <!--Menu-->
    <SolidColorBrush x:Key="MenuForeground" Color="#920892"></SolidColorBrush>
    <SolidColorBrush x:Key="MenuBackground" Color="White"></SolidColorBrush>
    <SolidColorBrush x:Key="MenuBorderBrush" Color="DarkBlue"></SolidColorBrush>
    <SolidColorBrush x:Key="MenuMouseOverBackground" Color="#0D3CD2"></SolidColorBrush>
    <SolidColorBrush x:Key="MenuMouseOverForeground" Color="White"></SolidColorBrush>
    <SolidColorBrush x:Key="MenuPressedBackground" Color="#082CA0"></SolidColorBrush>
    <SolidColorBrush x:Key="MenuPressedForeground" Color="White"></SolidColorBrush>

    <!--输入组件-->
    <SolidColorBrush x:Key="TextForeground" Color="#3A3A3A"></SolidColorBrush>
    <SolidColorBrush x:Key="TextBackground" Color="#F3F3F3"></SolidColorBrush>
    <SolidColorBrush x:Key="TextSelectionBrush" Color="#540CF6"></SolidColorBrush>

    <!--State brush-->
    <SolidColorBrush x:Key="SuccessfulfaiBrush" Color="#16B32A"></SolidColorBrush>
    <SolidColorBrush x:Key="FailedBrush" Color="#B92222"></SolidColorBrush>

    <FontFamily x:Key="FontFamily" >Microsoft YaHei</FontFamily>
    <sys:Double x:Key="FontSize">13</sys:Double>
    <sys:Double x:Key="DisableOpacity">0.5</sys:Double>
    <sys:Double x:Key="ReadonlyOpacity">0.88</sys:Double>
    <sys:Double x:Key="WatermarkOpacity">0.4</sys:Double>
    <sys:String x:Key="DateFormat">yyyy年MM月dd日</sys:String>
    <sys:String x:Key="DateTimeFormat">yyyy-MM-dd HH:mm:ss</sys:String>

    <!--ItemsControl:DataGrid,Tree-->
    <sys:Double x:Key="HeaderFontSize">14</sys:Double>
    <SolidColorBrush x:Key="HeaderBorderBrush" Color="#A6FFA500"></SolidColorBrush>
    <SolidColorBrush x:Key="HeaderBackground" Color="#0A48D3"></SolidColorBrush>
    <SolidColorBrush x:Key="ItemsContentBackground" Color="#1389D7"></SolidColorBrush>
    <SolidColorBrush x:Key="ItemsAlternationContentBackground" Color="#128EE0"></SolidColorBrush>
    <SolidColorBrush x:Key="GridLinesBrush" Color="#A6D0C2A7"></SolidColorBrush>
    <SolidColorBrush x:Key="ItemSelectedForeground" Color="White"></SolidColorBrush>
    <SolidColorBrush x:Key="ItemSelectedBackground" Color="#A145F8"></SolidColorBrush>
    <SolidColorBrush x:Key="ItemMouseOverBackground" Color="#BA7DF4"></SolidColorBrush>
    <SolidColorBrush x:Key="ItemMouseOverForeground" Color="White"></SolidColorBrush>

    <!--输入框-->
    <SolidColorBrush x:Key="ControlBorderBrush" Color="#999C9F"></SolidColorBrush>
    <SolidColorBrush x:Key="MouseOverBorderBrush" Color="#F6D1D1"></SolidColorBrush>

    <!--普通无背景按钮-->
    <SolidColorBrush x:Key="CheckedForeground" Color="#F7B63E"></SolidColorBrush>
    <SolidColorBrush x:Key="MouseOverForeground" Color="#8022F2"></SolidColorBrush>
    <SolidColorBrush x:Key="PressedForeground" Color="#3022BB"></SolidColorBrush>
    <SolidColorBrush x:Key="LinkForeground" Color="#3542DB"></SolidColorBrush>

    <!--边框：Menu-->
    <DropShadowEffect x:Key="DefaultDropShadow" Color="Black" BlurRadius="5" ShadowDepth="2" Direction="315" Opacity="0.6" />



    <!--Combox的样式-->
    <Style TargetType="ToggleButton" x:Key="stlToggleButton">
        <Setter Property="Foreground" Value="White"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border x:Name="Back" Background="Transparent" BorderThickness="1" BorderBrush="Transparent">
                        <Path Name="PathFill" Fill="Black" Width="8" Height="6" StrokeThickness="0" Data="M5,0 L10,10 L0,10 z" RenderTransformOrigin="0.5,0.5" Stretch="Fill">
                            <Path.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform/>
                                    <SkewTransform/>
                                    <RotateTransform Angle="180"/>
                                    <TranslateTransform/>
                                </TransformGroup>
                            </Path.RenderTransform>
                        </Path>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="PathFill" Property="Fill" Value="White"></Setter>
                            <Setter TargetName="Back" Property="Background" Value="Gray"></Setter>
                            <Setter TargetName="Back" Property="BorderBrush" Value="Transparent"></Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="ComboBox" x:Key="stlComboBox">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="True"/>
        <Setter Property="HorizontalAlignment" Value="Left"></Setter>
        <Setter Property="Foreground" Value="Black"></Setter>
        <Setter Property="Height" Value="24"></Setter>
        <Setter Property="Margin" Value="0,0,0,0"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ComboBox">
                    <Grid Background="#F7FDF7" Width="{TemplateBinding Width}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="0.7*"/>
                            <ColumnDefinition Width="0.3*" MaxWidth="30"/>
                        </Grid.ColumnDefinitions>
                        <TextBlock  Grid.Column="0"   VerticalAlignment="Center"   Text="{TemplateBinding Text}"></TextBlock>
                        <Border  Grid.Column="0" BorderThickness="1,1,1,1" BorderBrush="Gray" CornerRadius="1,0,0,1">
                        </Border>
                        <Border Grid.Column="1" BorderThickness="0,1,1,1" BorderBrush="Gray" CornerRadius="0,1,1,0">
                            <ToggleButton Style="{StaticResource stlToggleButton}" IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" ClickMode="Press"></ToggleButton>
                        </Border>
                        <Popup IsOpen="{TemplateBinding IsDropDownOpen}" Placement="Bottom" x:Name="Popup" Focusable="False" AllowsTransparency="True" PopupAnimation="Slide">
                            <Border CornerRadius="1" MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{TemplateBinding ActualWidth}" x:Name="DropDown" SnapsToDevicePixels="True">
                                <Border.Effect>
                                    <DropShadowEffect Color="Black" BlurRadius="2" ShadowDepth="0" Opacity="0.5"/>
                                </Border.Effect>
                                <ScrollViewer Margin="4,6,4,6" Style="{DynamicResource ScrollViewerStyle}" MaxHeight="{TemplateBinding MaxDropDownHeight}" SnapsToDevicePixels="True" HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto" CanContentScroll="True">
                                    <!-- StackPanel 用于显示子级，方法是将 IsItemsHost 设置为 True -->
                                    <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" Background="White"/>
                                </ScrollViewer>
                            </Border>
                        </Popup>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--Button圆角的样式-->
    <Style x:Key="BtnInfoStyle" TargetType="Button">
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Background" Value="#43a9c7"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border x:Name="border" CornerRadius="30" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="True">
                        <TextBlock Text="{TemplateBinding Content}" Foreground="{TemplateBinding Foreground}" VerticalAlignment="Center" HorizontalAlignment="Center"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="Background" Value="#2f96b4"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="border" Property="Background" Value="#2a89a4"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter   Property="Background" Value="#FFADADAD"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--下拉框样式-->
    <!-- ComboBoxItem样式 -->
    <Style x:Key="ComboBoxItemStyle" TargetType="ComboBoxItem">
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Height" Value="auto"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ComboBoxItem">
                    <Border Name="Back" Background="Transparent" BorderThickness="0,0,0,0" BorderBrush="#FF6A6A6A">
                        <ContentPresenter ContentSource="{Binding Source}" Margin="{TemplateBinding Padding}" HorizontalAlignment="Left" VerticalAlignment="Center"></ContentPresenter>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsHighlighted" Value="True">
                            <Setter TargetName="Back" Property="Background" Value="#5593f1"></Setter>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="Back" Property="Background" Value="#b7d2fa"></Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- ToggleButton样式（折叠展开按钮） -->
    <Style x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="ClickMode" Value="Press"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="templateRoot" SnapsToDevicePixels="true" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="#FF565656">
                        <Border x:Name="splitBorder" Background="White" Width="30" SnapsToDevicePixels="true" Margin="0" HorizontalAlignment="Right" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="#FF565656">
                            <Path x:Name="arrow" VerticalAlignment="Center" Margin="10,0,0,0" Stretch="Fill" Height="8" Width="10" HorizontalAlignment="Left" Fill="#1593CB" Data="M 50,50 L 0,0 100,0 z"/>
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="false"/>
                                <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="false"/>
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="true"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="#FF565656"/>
                        </MultiDataTrigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Fill" TargetName="arrow" Value="#FFADADAD"/>
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="#FFADADAD"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="arrow" Property="Fill" Value="#0357aa"></Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- ComboBox Template样式 -->
    <ControlTemplate x:Key="ComboBoxTemplate" TargetType="{x:Type ComboBox}">
        <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
            <Grid.ColumnDefinitions>
                <ColumnDefinition/>
                <ColumnDefinition Width="0"/>
            </Grid.ColumnDefinitions>
            <Popup x:Name="PART_Popup" MinHeight="150" AllowsTransparency="true" Grid.ColumnSpan="2" IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Margin="1" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom">
                <Border x:Name="dropDownBorder" BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" BorderThickness="1" Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{Binding ActualWidth, ElementName=templateRoot}">
                    <ScrollViewer x:Name="DropDownScrollViewer">
                        <Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
                            <Canvas x:Name="canvas" HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                <Rectangle x:Name="opaqueRect" Fill="{Binding Background, ElementName=dropDownBorder}" Height="{Binding ActualHeight, ElementName=dropDownBorder}" Width="{Binding ActualWidth, ElementName=dropDownBorder}"/>
                            </Canvas>
                            <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Continue" Background="#FFFFFFFF"/>
                        </Grid>
                    </ScrollViewer>
                </Border>
            </Popup>
            <Border Grid.ColumnSpan="2" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="0">
                <Grid>
                    <ToggleButton x:Name="toggleButton" MinWidth="90" Width="{Binding Width}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="0" Background="{TemplateBinding Background}" Grid.ColumnSpan="2" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource ComboBoxToggleButton}"/>
                    <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" Content="{TemplateBinding SelectionBoxItem}" ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"                                           IsHitTestVisible="false" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                </Grid>
            </Border>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="HasItems" Value="false">
                <Setter Property="Height" TargetName="dropDownBorder" Value="95"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGrouping" Value="true"/>
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
            </MultiTrigger>
            <Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="false">
                <Setter Property="Canvas.Top" TargetName="opaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
                <Setter Property="Canvas.Left" TargetName="opaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!-- ComboBox属性设置 -->
    <Style TargetType="{x:Type ComboBox}">
        <Setter Property="Background" Value="White"/>
        <Setter Property="BorderBrush" Value="#ABADB3"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="Padding" Value="6,3,5,3"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
        <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="ItemContainerStyle" Value="{DynamicResource ComboBoxItemStyle}"/>
        <Setter Property="Template" Value="{StaticResource ComboBoxTemplate}"/>
    </Style>


    <!--Button样式-->
    <Style TargetType="Button" x:Key="ButtonOne">
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Background" Value="#1593CB"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border x:Name="border" CornerRadius="3" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="True">
                        <TextBlock Text="{TemplateBinding Content}" Foreground="{TemplateBinding Foreground}" VerticalAlignment="Center" HorizontalAlignment="Center"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="Background" Value="#20ACE8"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="border" Property="Background" Value="#20ACE8"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter   Property="Background" Value="#BEBEBE"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter   Property="Background" Value="#FFADADAD"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="Button" x:Key="ButtonBase">
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Background" Value="#1593CB"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border x:Name="border" CornerRadius="3" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="True">
                        <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="Background" Value="#20ACE8"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="border" Property="Background" Value="#20ACE8"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter   Property="Background" Value="#BEBEBE"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter   Property="Background" Value="#FFADADAD"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--Button样式-->
    <Style TargetType="Button"  >
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Background" Value="#1593CB"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border x:Name="border" CornerRadius="3" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="True">
                        <TextBlock Text="{TemplateBinding Content}" Foreground="{TemplateBinding Foreground}" VerticalAlignment="Center" HorizontalAlignment="Center"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="Background" Value="#20ACE8"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="border" Property="Background" Value="#4ac5f2"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter   Property="Background" Value="#BEBEBE"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter   Property="Background" Value="#FFADADAD"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--表格Button样式-->
    <Style TargetType="Button" x:Key="DataGridButtonStyle" >
        <Setter Property="Foreground" Value="#169BD5"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Background" Value="White"/>
        <Setter Property="BorderThickness" Value="1,1,1,1"/>
        <Setter Property="BorderBrush" Value="#BDBDBD"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border x:Name="border" CornerRadius="3" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="True">
                        <TextBlock Text="{TemplateBinding Content}" Foreground="{TemplateBinding Foreground}" VerticalAlignment="Center" HorizontalAlignment="Center"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="#169BD5"/>
                            <Setter Property="Foreground" Value="White"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="White"/>
                            <Setter Property="Foreground" Value="#169BD5"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter   Property="Background" Value="#BEBEBE"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--datagrid样式-->
    <!--单元格样式触发-->
    <Style x:Key="dtagridCellStyle" TargetType="DataGridCell">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="DataGridCell"  >
                    <TextBlock   Padding="5,5,5,0" TextAlignment="Center" VerticalAlignment="Center">
                    <ContentPresenter VerticalAlignment="Center"/>
                    </TextBlock>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Foreground" Value="Black"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--行样式触发-->
    <Style x:Key="datagridRowStyle" TargetType="DataGridRow">
        <Setter Property="Background" Value="#F5F5F5" />
        <Setter Property="MinHeight" Value="25"/>
        <Setter Property="Foreground" Value="Black" />
        <Style.Triggers>
            <!--隔行换色-->
            <Trigger Property="AlternationIndex" Value="0" >
                <Setter Property="Background" Value="White" />
            </Trigger>
            <Trigger Property="AlternationIndex" Value="1" >
                <Setter Property="Background" Value="#F5F5F5" />
            </Trigger>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Foreground" Value="Black"/>
                <Setter Property="Background" Value="#BBFFFF"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--表头渐变色-->
    <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0" x:Key="myGradientBrush">
        <GradientStop Color="#bfd6f2" Offset="0"/>
        <GradientStop Color="White" Offset="0.653"/>
        <GradientStop Color="#bfd6f2" Offset="0.991"/>
    </LinearGradientBrush>
    <!--表头样式-->
    <Style x:Key="datagridColomnHeaderStyle" TargetType="{x:Type DataGridColumnHeader}">
        <Setter Property="MinHeight" Value="35"/>
        <Setter Property="MinWidth" Value="35"/>
        <Setter Property="Width" Value="auto"></Setter>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="5,0"/>
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="BorderThickness" Value="1"></Setter>
        <Setter Property="BorderBrush" Value="#BDBDBD"></Setter>
        <Setter Property="Background" Value="{StaticResource myGradientBrush}"></Setter>
    </Style>

    <!--表头渐变色-->
    <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0" x:Key="myGradientBrush1">
        <GradientStop Color="#FFB0C1D6" Offset="0"/>
        <GradientStop Color="White" Offset="0.653"/>
        <GradientStop Color="#FF8EA3BD" Offset="0.991"/>
    </LinearGradientBrush>
    <!--表头样式-->
    <Style x:Key="datagridColomnHeaderStyle1" TargetType="{x:Type DataGridColumnHeader}">
        <Setter Property="MinHeight" Value="35"/>
        <Setter Property="MinWidth" Value="35"/>
        <Setter Property="Width" Value="auto"></Setter>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="5,0"/>
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="BorderThickness" Value="1"></Setter>
        <Setter Property="BorderBrush" Value="#BDBDBD"></Setter>
        <Setter Property="Background" Value="{StaticResource myGradientBrush1}"></Setter>
    </Style>
    <!--网格线颜色-->
    <Style TargetType="DataGrid">
        <Setter Property="Background" Value="#F7FBFE"/>
        <Setter Property="BorderBrush" Value="#FFF5F7F5" />
        <Setter Property="AlternationCount" Value="2"/>
        <Setter Property="CellStyle" Value="{StaticResource dtagridCellStyle}"/>
        <Setter Property="RowStyle" Value="{StaticResource datagridRowStyle}"/>
        <Setter Property="ColumnHeaderStyle" Value="{StaticResource datagridColomnHeaderStyle}"/>
        <Setter Property="HorizontalGridLinesBrush">
            <Setter.Value>
                <SolidColorBrush Color="#CACACA"/>
            </Setter.Value>
        </Setter>
        <Setter Property="VerticalGridLinesBrush">
            <Setter.Value>
                <SolidColorBrush Color="#CACACA"/>
            </Setter.Value>
        </Setter>
    </Style>

    <!--选项卡样式-->
    <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0" x:Key="myGradientBrushTabControl">
        <GradientStop Color="#1593CB" Offset="0"/>
        <GradientStop Color="White" Offset="0.653"/>
    </LinearGradientBrush>
    <Style TargetType="{x:Type TabItem}">
        <Setter Property="Background" Value="White"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TabItem">
                    <Border BorderBrush="#ABADB3" BorderThickness="1,1,1,0" >
                        <Grid Name="Panel" Margin="0,0,0,-1" Height="30" Width="{Binding Width}" Background="Transparent" >
                            <ContentPresenter x:Name="ContentSite"
                                        VerticalAlignment="Center"
                                        HorizontalAlignment="Center"
                                        ContentSource="Header"
                                        Margin="10,2"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="true">
                            <Setter TargetName="Panel" Property="Background" Value="{StaticResource myGradientBrushTabControl}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type TabControl}">
        <Setter Property="BorderThickness" Value="1"/>
    </Style>

    <!--TreeView样式-->
    <!--HierarchicalDataTemplate分层模板样式-->
    <HierarchicalDataTemplate x:Key="treeviewTemplate" ItemsSource="{Binding Children,Mode=TwoWay}">
        <Grid  Background="Transparent">
            <Grid.Resources>
                <cnv:BoolToVisibleConver x:Key="boolToVisible"/>
                <cnv:VisibleToReverseConver x:Key="visibleToReverse"/>
            </Grid.Resources>
            <Grid MinHeight="30" x:Name="userinfo" Background="Transparent" Margin="-5 0 0 0" Visibility="{Binding Visibility,ElementName=groupinginfo,Converter={StaticResource visibleToReverse}}">
                <Grid Height="50" x:Name="grid">
                    <Border Background="#62acf9" Width="40" Height="40" CornerRadius="4" HorizontalAlignment="Left" Margin="0 0 0 0">
                        <TextBlock Text="{Binding SurName}" FontSize="23" Foreground="White" VerticalAlignment="Center" HorizontalAlignment="Center"/>
                    </Border>
                    <TextBlock Text="{Binding Name}" Margin="50 7 0 0" FontSize="13"/>
                    <TextBlock Text="{Binding Info}" Foreground="#808080" Margin="50 30 0 0"/>
                </Grid>
            </Grid>
            <StackPanel MinHeight="25" x:Name="groupinginfo" Orientation="Horizontal" Background="Transparent" HorizontalAlignment="Left" Visibility="{Binding IsGrouping,Converter={StaticResource boolToVisible}}">
                <TextBlock Text="{Binding DisplayName}" Margin="3 0" VerticalAlignment="Center" HorizontalAlignment="Left"/>
            </StackPanel>
        </Grid>
    </HierarchicalDataTemplate>
    <!--TreeViewItem样式代码-->
    <Style  x:Key="DefaultTreeViewItem" TargetType="{x:Type TreeViewItem}">
        <Setter Property="MinHeight" Value="25" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeViewItem}">
                    <ControlTemplate.Resources>
                        <cnv:TreeViewConver  x:Key="indentConverter"/>
                    </ControlTemplate.Resources>
                    <Grid Background="Transparent">
                        <Grid.RowDefinitions>
                            <RowDefinition/>
                            <RowDefinition/>
                        </Grid.RowDefinitions>
                        <Border Name="itemBackground" Background="{TemplateBinding Background}"  
                                BorderBrush="{TemplateBinding BorderBrush}"  
                                BorderThickness="{TemplateBinding BorderThickness}"  
                                Padding="{TemplateBinding Padding}">
                            <Grid Background="Transparent">
                                <Grid x:Name="ItemRoot" Margin="{Binding Converter={StaticResource indentConverter},RelativeSource={RelativeSource TemplatedParent}}" Background="Transparent">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="16" />
                                        <ColumnDefinition Width="*"/>
                                    </Grid.ColumnDefinitions>
                                    <ToggleButton x:Name="Expander" HorizontalAlignment="Left" ClickMode="Press" IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}">
                                        <ToggleButton.Style>
                                            <Style TargetType="{x:Type ToggleButton}">
                                                <Setter Property="Focusable" Value="False"/>
                                                <Setter Property="Width" Value="16"/>
                                                <Setter Property="Height" Value="16"/>
                                                <Setter Property="Template">
                                                    <Setter.Value>
                                                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                            <Border Background="Transparent" Height="16" Padding="5" Width="16">
                                                                <Path x:Name="ExpandPath" Data="M0,0 L0,6 L6,0 z" Fill="#1593CB" Stroke="#1593CB">
                                                                    <Path.RenderTransform>
                                                                        <RotateTransform Angle="135" CenterY="3" CenterX="3"/>
                                                                    </Path.RenderTransform>
                                                                </Path>
                                                            </Border>
                                                            <ControlTemplate.Triggers>
                                                                <Trigger Property="IsChecked" Value="True">
                                                                    <Setter Property="RenderTransform" TargetName="ExpandPath">
                                                                        <Setter.Value>
                                                                            <RotateTransform Angle="180" CenterY="3" CenterX="3"/>
                                                                        </Setter.Value>
                                                                    </Setter>
                                                                    <Setter Property="Fill" TargetName="ExpandPath" Value="#0357aa"/>
                                                                    <Setter Property="Stroke" TargetName="ExpandPath" Value="#0357aa"/>
                                                                </Trigger>
                                                                <Trigger Property="IsMouseOver" Value="True">
                                                                    <Setter Property="Stroke" TargetName="ExpandPath" Value="#0357aa"/>
                                                                    <Setter Property="Fill" TargetName="ExpandPath" Value="#0357aa"/>
                                                                </Trigger>
                                                                <MultiTrigger>
                                                                    <MultiTrigger.Conditions>
                                                                        <Condition Property="IsMouseOver" Value="True"/>
                                                                        <Condition Property="IsChecked" Value="True"/>
                                                                    </MultiTrigger.Conditions>
                                                                    <Setter Property="Stroke" TargetName="ExpandPath" Value="#0357aa"/>
                                                                    <Setter Property="Fill" TargetName="ExpandPath" Value="#0357aa"/>
                                                                </MultiTrigger>
                                                            </ControlTemplate.Triggers>
                                                        </ControlTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                            </Style>
                                        </ToggleButton.Style>
                                    </ToggleButton>
                                    <ContentPresenter Grid.Column="1" x:Name="PART_Header" ContentSource="Header" HorizontalAlignment="Stretch" >
                                    </ContentPresenter>
                                </Grid>
                            </Grid>
                        </Border>
                        <ItemsPresenter x:Name="ItemsHost" Grid.Row="1"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding IsGrouping}" Value="false">
                            <Setter Property="Visibility" TargetName="Expander" Value="Hidden"/>
                        </DataTrigger>
                        <Trigger Property="HasItems" Value="False">
                            <Setter Property="Visibility" TargetName="Expander" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="IsExpanded" Value="False">
                            <Setter Property="Visibility" TargetName="ItemsHost" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Background" TargetName="itemBackground" Value="#b7d2fa"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsFocused" Value="False"/>
                                <Condition SourceName="itemBackground" Property="IsMouseOver" Value="true"/>
                            </MultiTrigger.Conditions>
                            <!--<Setter Property="Background" Value="#b7d2fa" TargetName="itemBackground"/>-->
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="#FFADADAD"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--TreeView样式代码-->
    <Style TargetType="{x:Type TreeView}">
        <Setter Property="ScrollViewer.CanContentScroll" Value="True" />
        <Setter Property="VirtualizingStackPanel.IsVirtualizing" Value="True"></Setter>
        <Setter Property="VirtualizingStackPanel.VirtualizationMode" Value="Recycling" />
        <Setter Property="ScrollViewer.IsDeferredScrollingEnabled" Value="False" />
        <Setter Property="ItemContainerStyle" Value="{StaticResource DefaultTreeViewItem}"></Setter>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="ItemTemplate" Value="{StaticResource treeviewTemplate}"/>
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <VirtualizingStackPanel IsItemsHost="True" Margin="0"/>
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="FontAwesome">
        <Setter Property="TextElement.FontFamily" Value="/BaseInfo;component/Resources/#FontAwesome" />
        <Setter Property="TextBlock.Width" Value="20"></Setter>
        <Setter Property="TextBlock.Height" Value="30"></Setter>
        <Setter Property="TextBlock.TextAlignment" Value="Center"></Setter>
        <Setter Property="TextBlock.FontSize" Value="20"></Setter>
        <Setter Property="TextBlock.Foreground" Value="Green"></Setter>
        <Setter Property="TextBlock.VerticalAlignment" Value="Center"></Setter>
    </Style>
    <Style x:Key="FontAwesome1">
        <Setter Property="TextElement.FontFamily" Value="/BaseInfo;component/Resources/#iconfont" />
        <Setter Property="TextBlock.Width" Value="100"></Setter>
        <Setter Property="TextBlock.Height" Value="100"></Setter>
        <Setter Property="TextBlock.TextAlignment" Value="Center"></Setter>
        <Setter Property="TextBlock.FontSize" Value="60"></Setter>
        <Setter Property="TextBlock.Foreground" Value="Green"></Setter>
    </Style>
    <!--背景透明的HeaderItem样式,带旋转动画-->
    <Style x:Key="TransparentHeaderMenuItem" TargetType="{x:Type MenuItem}">
        <Setter Property="BorderBrush" Value="{StaticResource MenuBorderBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Background" Value="{StaticResource MenuBackground}"/>
        <Setter Property="Foreground" Value="{StaticResource TextForeground}"/>
        <Setter Property="FontSize" Value="{StaticResource FontSize}"/>
        <Setter Property="Margin" Value="2,0,2,0"/>
        <Setter Property="Height" Value="30"/>
        <Setter Property="VerticalContentAlignment" Value="Center"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type MenuItem}">
                    <Grid x:Name="Bg" VerticalAlignment="{TemplateBinding VerticalAlignment}">
                        <StackPanel Orientation="Horizontal" x:Name="border" VerticalAlignment="Center" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}">
                            <!--icon-->
                            <TextBlock x:Name="PART_Icon" Text="{TemplateBinding Icon}" Foreground="{TemplateBinding Foreground}"  HorizontalAlignment="Stretch"  VerticalAlignment="Center" 
                                        Style="{StaticResource FontAwesome}"/>
                            <TextBlock x:Name="txtHeader" Margin="1" FontSize="{TemplateBinding FontSize}" HorizontalAlignment="Stretch" 
                                           Text="{TemplateBinding Header}" VerticalAlignment="Center" Grid.Column="1" Foreground="{TemplateBinding Foreground}"/>
                        </StackPanel>
                        <!--淡出子集菜单容器-->
                        <Popup x:Name="SubMenuPopup" AllowsTransparency="true" IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" 
    									Placement="Bottom"  Focusable="false" VerticalOffset="0"
                                   PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}">
                            <Border Background="{TemplateBinding Background}"  CornerRadius="0" Margin="5" Effect="{StaticResource DefaultDropShadow}"
                                                BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                                <Grid x:Name="SubMenu" Grid.IsSharedSizeScope="True">
                                    <StackPanel Margin="0" IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle"/>
                                </Grid>
                            </Border>
                        </Popup>
                    </Grid>
                    <!--触发器-->
                    <ControlTemplate.Triggers>
                        <!--高亮状态-->
                        <Trigger Property="IsHighlighted" Value="true">
                            <Setter Property="Foreground" Value="{StaticResource MouseOverForeground}"></Setter>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Foreground" Value="{StaticResource PressedForeground}"></Setter>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="border" Value="{StaticResource DisableOpacity}" Property="Opacity"></Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--HorizontalSeparatorStyle-->
    <Style x:Key="HorizontalSeparatorStyle" TargetType="{x:Type Separator}">
        <Setter Property="Background" Value="{StaticResource ControlBorderBrush}"/>
        <Setter Property="Margin" Value="3,2,3,2"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Separator}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" 
                            Height="1" SnapsToDevicePixels="true" Margin="{TemplateBinding Margin}" Opacity="0.8"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
      
    <Style TargetType="Label">
        <!--<Setter Property="Foreground" Value="#0000FF"></Setter>-->
        <Setter Property="Margin" Value="3,0"></Setter>
        <Setter Property="FontWeight" Value="Black"></Setter>
        <Setter Property="VerticalAlignment" Value="Center"></Setter>
        <Setter Property="HorizontalAlignment" Value="Center"></Setter>
    </Style>
    <Style TargetType="TextBlock"  >
        <Setter Property="VerticalAlignment" Value="Center"></Setter>
        <Setter Property="HorizontalAlignment" Value="Center"></Setter>
    </Style>
    <Style TargetType="TextBox"  >
        <Setter Property="VerticalContentAlignment" Value="Center"></Setter>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="BorderThickness" Value="0,0,0,1"></Setter>
                <Setter Property="Background" Value="Transparent"></Setter>
            </Trigger>
            <Trigger Property="AcceptsReturn" Value="True">
                <Setter Property="VerticalContentAlignment" Value="Top"></Setter>
            </Trigger>
        </Style.Triggers>

    </Style>
    <Style TargetType="DataGrid"   x:Key="RowDatagrid">
        <Setter Property="Background" Value="#FF359BE8"/>
        <Setter Property="BorderBrush" Value="#FF1A9FD1" />
        <Setter Property="AlternationCount" Value="2"/>
        <Setter Property="CellStyle" Value="{StaticResource dtagridCellStyle}"/>
        <Setter Property="RowStyle" Value="{StaticResource datagridRowStyle}"/>
        <Setter Property="ColumnHeaderStyle" Value="{StaticResource datagridColomnHeaderStyle1}"/>
        <Setter Property="HorizontalGridLinesBrush">
            <Setter.Value>
                <SolidColorBrush Color="#CACACA"/>
            </Setter.Value>
        </Setter>
        <Setter Property="VerticalGridLinesBrush">
            <Setter.Value>
                <SolidColorBrush Color="#CACACA"/>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>  