<ui1:WindowsBase
    xmlns:ui1="clr-namespace:UI;assembly=UI" x:Class="WpfApp3.WPfTestContrl.WindowHtml"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:WpfApp3.WPfTestContrl"
        xmlns:ex="clr-namespace:Msl.HtmlEditor;assembly=Msl.HtmlEditor"
        xmlns:ui="clr-namespace:UI.Eumn;assembly=UI"
        xmlns:um="clr-namespace:UI.Model;assembly=UI"
        xmlns:uc="clr-namespace:UI.Contorl;assembly=UI"
        xmlns:em="clr-namespace:UI.Eumn;assembly=UI"
        mc:Ignorable="d"
        x:Name="Base"
        Icon="pack://application:,,,/Image/timg.jpg"
        xmlns:sys="clr-namespace:System;assembly=mscorlib"
        CornerRadius="10"
        CustomizedAreaContent="{StaticResource cb}"
        Title="WindowHtml" Height="450" Width="800">
    <Window.Resources>
        <Style TargetType="{x:Type Button}" x:Key="ActionBtn">
            <Setter Property="Width" Value="100"></Setter>
            <Setter Property="Height" Value="60"></Setter>
            <Setter Property="Margin" Value="10"></Setter>
            <Setter Property="FontSize" Value="20"></Setter>
            <Setter Property="RenderTransformOrigin" Value="0.5,0.5"></Setter>
            <Setter Property="RenderTransform">
                <Setter.Value>
                    <!--使用RotateTransform时，一定要使用TransformGroup，否则不能进行动画哦-->
                    <TransformGroup>
                        <RotateTransform></RotateTransform>
                    </TransformGroup>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <EventTrigger RoutedEvent="Button.MouseEnter">
                    <EventTrigger.Actions>
                        <BeginStoryboard>
                            <Storyboard RepeatBehavior="Forever" Storyboard.TargetProperty="RenderTransform.Children[0].Angle">
                                <DoubleAnimation From="0" To="360" Duration="0:0:2"></DoubleAnimation>
                            </Storyboard>
                        </BeginStoryboard>
                    </EventTrigger.Actions>
                </EventTrigger>
                <EventTrigger RoutedEvent="Button.MouseLeave">
                    <EventTrigger.Actions>
                        <BeginStoryboard>
                            <Storyboard Storyboard.TargetProperty="RenderTransform.Children[0].Angle">
                                <DoubleAnimation To="0" Duration="0:0:1"/>
                            </Storyboard>
                        </BeginStoryboard>
                    </EventTrigger.Actions>
                </EventTrigger>
            </Style.Triggers>
        </Style>
        <ObjectDataProvider x:Key="odp" ObjectType="{x:Type ui:StudentEnum}"  >
        </ObjectDataProvider>
        <ObjectDataProvider x:Key="InlineTypeEnum" MethodName="GetValues"  ObjectType="{x:Type sys:Enum}" >
            <ObjectDataProvider.MethodParameters>
                <x:Type TypeName="ui:StudentEnum"/>
            </ObjectDataProvider.MethodParameters>
        </ObjectDataProvider>

        <ObjectDataProvider x:Key="myDataSource" ObjectType="{x:Type ui:StudentEnum}">
            <ObjectDataProvider.ConstructorParameters>
                <sys:String>Joe</sys:String>
            </ObjectDataProvider.ConstructorParameters>
        </ObjectDataProvider>
        <ObjectDataProvider x:Key="agile" MethodName="GetValues"  ObjectType="{x:Type sys:Enum}" >
            <ObjectDataProvider.MethodParameters>
            </ObjectDataProvider.MethodParameters>
        </ObjectDataProvider>
        <SolidColorBrush x:Key="Button.Static.Background" Color="#FFDDDDDD"/>
        <SolidColorBrush x:Key="Button.Static.Border" Color="#FF707070"/>
        <SolidColorBrush x:Key="Button.MouseOver.Background" Color="#FFBEE6FD"/>
        <SolidColorBrush x:Key="Button.MouseOver.Border" Color="#FF3C7FB1"/>
        <SolidColorBrush x:Key="Button.Pressed.Background" Color="#FFC4E5F6"/>
        <SolidColorBrush x:Key="Button.Pressed.Border" Color="#FF2C628B"/>
        <SolidColorBrush x:Key="Button.Disabled.Background" Color="#FFF4F4F4"/>
        <SolidColorBrush x:Key="Button.Disabled.Border" Color="#FFADB2B5"/>
        <SolidColorBrush x:Key="Button.Disabled.Foreground" Color="#FF838383"/>
        <Style x:Key="ButtonStyle1" TargetType="{x:Type Button}">
            <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
            <Setter Property="Background" Value="{StaticResource Button.Static.Background}"/>
            <Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Padding" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border CornerRadius="3" x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                            <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsDefaulted" Value="true">
                                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.MouseOver.Background}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.MouseOver.Border}"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Pressed.Background}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Pressed.Border}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Disabled.Background}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Disabled.Border}"/>
                                <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Button.Disabled.Foreground}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="BorderStyle1" TargetType="{x:Type Border}"/>
        <SolidColorBrush x:Key="OptionMark.Static.Background" Color="#FFFFFFFF"/>
        <SolidColorBrush x:Key="OptionMark.Static.Border" Color="#FF707070"/>
        <Style x:Key="OptionMarkFocusVisual">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Rectangle Margin="14,0,0,0" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <SolidColorBrush x:Key="OptionMark.MouseOver.Background" Color="#FFF3F9FF"/>
        <SolidColorBrush x:Key="OptionMark.MouseOver.Border" Color="#FF5593FF"/>
        <SolidColorBrush x:Key="OptionMark.MouseOver.Glyph" Color="#FF212121"/>
        <SolidColorBrush x:Key="OptionMark.Disabled.Background" Color="#FFE6E6E6"/>
        <SolidColorBrush x:Key="OptionMark.Disabled.Border" Color="#FFBCBCBC"/>
        <SolidColorBrush x:Key="OptionMark.Disabled.Glyph" Color="#FF707070"/>
        <SolidColorBrush x:Key="OptionMark.Pressed.Background" Color="#FFD9ECFF"/>
        <SolidColorBrush x:Key="OptionMark.Pressed.Border" Color="#FF3C77DD"/>
        <SolidColorBrush x:Key="OptionMark.Pressed.Glyph" Color="#FF212121"/>
        <SolidColorBrush x:Key="OptionMark.Static.Glyph" Color="#FF212121"/>
        <Style x:Key="CheckBoxStyle1" TargetType="{x:Type CheckBox}">
            <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
            <Setter Property="Background" Value="{StaticResource OptionMark.Static.Background}"/>
            <Setter Property="BorderBrush" Value="{StaticResource OptionMark.Static.Border}"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type CheckBox}">
                        <Grid x:Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Border x:Name="checkBoxBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="1" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                <Grid x:Name="markGrid">
                                    <Path x:Name="optionMark" Data="M10.23879353 1.70739055 6.81749753 5.12868655 10.18595033 8.49713936 8.49738065 10.18570903 5.12892785 6.81725623 1.70787313 10.023855224 0.00168905 8.53236816 3.42274377 5.11107215 0.05429097 1.74261935 1.74286064 0.05404967 5.11131345 3.42250247 8.53260945 0.00120647 10.23879353 1.70739055 Z" Fill="{StaticResource OptionMark.Static.Glyph}" Margin="1" Opacity="0" Stretch="None"/>
                                    <Rectangle x:Name="indeterminateMark" Fill="{StaticResource OptionMark.Static.Glyph}" Margin="2" Opacity="0"/>
                                </Grid>
                            </Border>
                            <ContentPresenter x:Name="contentPresenter" Grid.Column="1" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="HasContent" Value="true">
                                <Setter Property="FocusVisualStyle" Value="{StaticResource OptionMarkFocusVisual}"/>
                                <Setter Property="Padding" Value="4,-1,0,0"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Background" TargetName="checkBoxBorder" Value="{StaticResource OptionMark.MouseOver.Background}"/>
                                <Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="{StaticResource OptionMark.MouseOver.Border}"/>
                                <Setter Property="Fill" TargetName="optionMark" Value="{StaticResource OptionMark.MouseOver.Glyph}"/>
                                <Setter Property="Fill" TargetName="indeterminateMark" Value="{StaticResource OptionMark.MouseOver.Glyph}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Background" TargetName="checkBoxBorder" Value="{StaticResource OptionMark.Disabled.Background}"/>
                                <Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="{StaticResource OptionMark.Disabled.Border}"/>
                                <Setter Property="Fill" TargetName="optionMark" Value="{StaticResource OptionMark.Disabled.Glyph}"/>
                                <Setter Property="Fill" TargetName="indeterminateMark" Value="{StaticResource OptionMark.Disabled.Glyph}"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter Property="Background" TargetName="checkBoxBorder" Value="{StaticResource OptionMark.Pressed.Background}"/>
                                <Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="{StaticResource OptionMark.Pressed.Border}"/>
                                <Setter Property="Fill" TargetName="optionMark" Value="{StaticResource OptionMark.Pressed.Glyph}"/>
                                <Setter Property="Fill" TargetName="indeterminateMark" Value="{StaticResource OptionMark.Pressed.Glyph}"/>
                            </Trigger>
                            <Trigger Property="IsChecked" Value="true">
                                <Setter Property="Opacity" TargetName="optionMark" Value="1"/>
                                <Setter Property="Opacity" TargetName="indeterminateMark" Value="0"/>
                            </Trigger>
                            <Trigger Property="IsChecked" Value="{x:Null}">
                                <Setter Property="Opacity" TargetName="optionMark" Value="0"/>
                                <Setter Property="Opacity" TargetName="indeterminateMark" Value="1"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="EventTriggerTest">
            <Style.Triggers>
                <EventTrigger RoutedEvent="Mouse.MouseEnter">
                    <EventTrigger.Actions>
                        <BeginStoryboard>
                            <Storyboard>
                                <DoubleAnimation Duration="0:0:0.2" Storyboard.TargetProperty="FontSize" To="22"/>
                            </Storyboard>
                        </BeginStoryboard>
                    </EventTrigger.Actions>
                </EventTrigger>
                <EventTrigger RoutedEvent="Mouse.MouseLeave">
                    <EventTrigger.Actions>
                        <BeginStoryboard>
                            <Storyboard>
                                <DoubleAnimation Duration="0:0:1" Storyboard.TargetProperty="FontSize"></DoubleAnimation>
                            </Storyboard>
                        </BeginStoryboard>
                    </EventTrigger.Actions>
                </EventTrigger>
            </Style.Triggers>
        </Style>

    </Window.Resources>
    <Grid>
        <Grid.Resources>
        </Grid.Resources>
        <Ellipse Width="{Binding RelativeSource={RelativeSource Mode=Self},Path=Height}">
        </Ellipse>

        <Border    BorderThickness="3" BorderBrush="#3c4d72"    ClipToBounds="True"
                 CornerRadius="3"  Background="LightBlue"  Width="606" Height="356"    >
            <Border.Effect>
                <DropShadowEffect BlurRadius="6" ShadowDepth="0" Color="#B7B7B7"/>
            </Border.Effect>
            <Border.OpacityMask>
                <VisualBrush>
                    <VisualBrush.Visual>
                        <Border Background="Red"
                                SnapsToDevicePixels="True"
                                CornerRadius="{Binding CornerRadius, RelativeSource={RelativeSource AncestorType=Border}}"
                                        Width="{Binding ActualWidth, RelativeSource={RelativeSource AncestorType=Border}}"
                                        Height="{Binding ActualHeight, RelativeSource={RelativeSource AncestorType=Border}}" />
                        <!--<Border Background="Red"
                                        CornerRadius="{Binding CornerRadius, RelativeSource={RelativeSource AncestorType=Border}}"
                                        Width="{Binding ActualWidth, RelativeSource={RelativeSource AncestorType=Border}}"
                                        Height="{Binding ActualHeight, RelativeSource={RelativeSource AncestorType=Border}}" />-->
                    </VisualBrush.Visual>
                </VisualBrush>
            </Border.OpacityMask>
            <WrapPanel  >
                <TextBox ToolTip="{x:Static ui:cl_Sex1.cateKey}" Text="sda" Width="120">
                    <TextBox.Style>
                        <Style TargetType="TextBox">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=Self},Path=ToolTip}" Value="{x:Static um:ResourcesClass.English}">
                                    <Setter Property="FontSize" Value="45"></Setter>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </TextBox.Style>
                </TextBox>
                <DatePicker DisplayDate="2020/02/12" x:Name="pdate" SelectedDate="{Binding  ElementName=Base,Path=SeleDate}" ></DatePicker>
                <TextBox Text="{Binding ElementName=pdate,Path=SelectedDate,StringFormat= {}{0:yyyy/MM/dd} }" />
                <Button  Content="旋转button" Style="{StaticResource ActionBtn}"></Button>
                
                <Button Margin="5"  SnapsToDevicePixels="False"  x:Name="BtnTest" Content="测试asay"   >
                    <!--<Button.Effect>
                        --><!--<DropShadowEffect ShadowDepth="5"  Color="Red" BlurRadius="5" Direction="60"></DropShadowEffect>--><!--
                        <BlurEffect Radius="3" ></BlurEffect>
                    </Button.Effect>
                    <Button.Style>
                        <Style TargetType="Button">
                            <Style.Triggers>
                                <EventTrigger RoutedEvent="Button.Click">
                                    <EventTrigger.Actions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimation  Storyboard.TargetName="BtnTest"  Storyboard.TargetProperty="Width" To="250" Duration="0:0:5"></DoubleAnimation>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </EventTrigger.Actions>
                                </EventTrigger>
                            </Style.Triggers>
                        </Style>
                    </Button.Style>-->
                    <Button.Triggers>
                        <EventTrigger RoutedEvent="Button.Click">
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation Storyboard.TargetProperty="Width" To="300" From="500" Duration="0:0:0.5"></DoubleAnimation>
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                    </Button.Triggers>
                </Button>
                <Ellipse Height="100" Width="100" Visibility="Collapsed">
                    <Ellipse.Fill>
                        <SolidColorBrush x:Name="ellipseBrush" Color="SkyBlue"/>
                    </Ellipse.Fill>
                    <!--定义触发器-->
                    <Ellipse.Triggers>
                        <EventTrigger RoutedEvent="Ellipse.Loaded">
                            <EventTrigger.Actions>
                                <BeginStoryboard>
                                    <Storyboard Duration="00:00:06" RepeatBehavior="Forever">
                                        <DoubleAnimation Storyboard.TargetProperty="(Ellipse.Width)" Duration="0:0:3" AutoReverse="True" FillBehavior="Stop" RepeatBehavior="Forever" AccelerationRatio="0.9"  DecelerationRatio="0.1" From="100" To="300"/>
                                        <ColorAnimation Storyboard.TargetName="ellipseBrush" Storyboard.TargetProperty="(SolidColorBrush.Color)" Duration="0:0:3" AutoReverse="True" FillBehavior="Stop" RepeatBehavior="Forever" From="SkyBlue" To="White"/>
                                       
                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger.Actions>
                        </EventTrigger>
                    </Ellipse.Triggers>
                </Ellipse>
                <RadioButton Content="aa"  GroupName="Test"></RadioButton>
                <RadioButton Content="bb" GroupName="Test"></RadioButton>
                <Button Visibility="Collapsed"  Content="aa" x:Name="Btntest"  >
                    <Button.Effect>
                        <BlurEffect Radius="1"></BlurEffect>
                    </Button.Effect>
                    <Button.Style>
                        <Style TargetType="Button">
                            <Setter Property="RenderTransformOrigin" Value="0.5,0.5"></Setter>
                            <Setter Property="RenderTransform">
                                <Setter.Value>
                                    <!--使用RotateTransform时，一定要使用TransformGroup，否则不能进行动画哦-->
                                    <TransformGroup>
                                        <RotateTransform></RotateTransform>
                                    </TransformGroup>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </Button.Style>
                    <Button.Triggers>
                        <EventTrigger RoutedEvent="Button.Loaded" >
                            <EventTrigger.Actions>
                                <BeginStoryboard HandoffBehavior="Compose">
                                    
                                    <Storyboard Duration="00:00:06" RepeatBehavior="Forever">
                                        <!--<ColorAnimation Storyboard.TargetName="Btntest" Storyboard.TargetProperty="(Button.Background).(SolidColorBrush.Color)" Duration="0:0:3" AutoReverse="True" FillBehavior="Stop" RepeatBehavior="Forever" From="SkyBlue" To="White"/>-->

                                        <DoubleAnimation Storyboard.TargetProperty="(Button.Width)" Duration="0:0:3" AutoReverse="True" FillBehavior="Stop" RepeatBehavior="Forever" AccelerationRatio="0.9"  DecelerationRatio="0.1" From="100" To="300" By="10"/>
                                        <ColorAnimation Storyboard.TargetProperty="(Button.Background).(SolidColorBrush.Color)"    Duration="0:0:3" AutoReverse="True" FillBehavior="Stop" From="AliceBlue" To="Red"></ColorAnimation>
                                      <DoubleAnimation From="0" To="360" Duration="0:0:2" Storyboard.TargetProperty="RenderTransform.Children[0].Angle"></DoubleAnimation>
                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger.Actions>
                        </EventTrigger>
                    </Button.Triggers>
                </Button>
                <DataGrid  Visibility="Collapsed" ItemsSource="{Binding Source={StaticResource DemoTypes}}">

                </DataGrid>
                <ComboBox  ></ComboBox>
                <ComboBox ItemsSource="{Binding Source={StaticResource DemoTypes}}" SelectionChanged="ComboBox_SelectionChanged" ></ComboBox>
                <ComboBox x:Name="CbTest" SelectionChanged="CbTest_SelectionChanged" DisplayMemberPath="BanjiHao" SelectedValuePath="BanjiName">
                </ComboBox>
                <Button x:Name="cmd" Content="测试一种取形状" Background="Red"></Button>
                <Rectangle   Width="{Binding ElementName=cmd,Path=ActualWidth}"  Height="82"   >
                    <Rectangle.Fill>
                        <BitmapCacheBrush  Target="{Binding ElementName=cmd}"   AutoLayoutContent="False"    >
                        </BitmapCacheBrush>
                    </Rectangle.Fill>
                    <!--<Rectangle.RenderTransform>
                        <ScaleTransform ScaleX="0.5" ScaleY="0.5"  CenterX="50" CenterY="50" >
                            
                        </ScaleTransform>
                    </Rectangle.RenderTransform>-->
                </Rectangle>
                <Polygon Fill="Red"   Points="0,0 56,89 120,89">
                    <Polygon.RenderTransform>
                        <RotateTransform Angle="10"  CenterX="0" CenterY="0"></RotateTransform>
                    </Polygon.RenderTransform>
                </Polygon>
                <Rectangle Fill="Red" Width="70" Height="10" x:Name="rect" >
                    <Rectangle.RenderTransform>
                        <RotateTransform Angle="10"   ></RotateTransform>
                    </Rectangle.RenderTransform>

                </Rectangle>
                <!--<Rectangle Fill="#AAAAAAAA" Width="70" Height="10">
                    <Rectangle.RenderTransform>
                        <TransformGroup>
                            <ScaleTransform/>
                            <SkewTransform AngleX="-79.593" AngleY="121"/>
                            <RotateTransform Angle="19.999999999999996"/>
                            <TranslateTransform X="51.163" Y="18.622"/>
                        </TransformGroup>
                    </Rectangle.RenderTransform>

                </Rectangle>-->
                <Rectangle Fill="Red" Width="70" Height="10" Style="{StaticResource EventTriggerTest}">
                    <Rectangle.RenderTransform>
                        <RotateTransform Angle="90" CenterX="35" CenterY="5"   ></RotateTransform>
                    </Rectangle.RenderTransform>

                </Rectangle>
                <Path Fill="Red" Visibility="Collapsed">
                    <Path.Data>
                        <RectangleGeometry Rect="0,0,50,100"  RadiusX="110" RadiusY="0">
                            
                        </RectangleGeometry>
                    </Path.Data>
                </Path>
                <StackPanel>
                    <TextBox x:Name="txt" Width="60" Height="40" FontSize="30" >
                        adfas
                    </TextBox>
                    <Rectangle>
                        <Rectangle.Fill>
                            <VisualBrush Visual="{Binding ElementName=txt}"></VisualBrush>
                        </Rectangle.Fill>
                        <Rectangle.OpacityMask>
                            <LinearGradientBrush>
                                <GradientStop Offset="0.3" Color="Transparent"></GradientStop>
                                <GradientStop Offset="0.1" Color="#44000000"></GradientStop>
                            </LinearGradientBrush>
                        </Rectangle.OpacityMask>
                        <Rectangle.RenderTransform>
                            <ScaleTransform ScaleY="-1"></ScaleTransform>
                        </Rectangle.RenderTransform>
                    </Rectangle>
                </StackPanel>
                <Path Fill="Yellow" Stroke="Red" >
                    <Path.Data>
                        <LineGeometry   StartPoint="10,20" EndPoint="30,89"></LineGeometry>
                    </Path.Data>
                </Path>
                <Path Fill="Red" Stroke="Yellow" RenderTransformOrigin="0.5,0.5" Height="100">
                    <Path.RenderTransform>
                        <TransformGroup>
                            <RotateTransform></RotateTransform>
                        </TransformGroup>
                    </Path.RenderTransform>
                    <Path.Data>
                        <CombinedGeometry GeometryCombineMode="Union">
                            <CombinedGeometry.Geometry1>
                                <CombinedGeometry GeometryCombineMode="Exclude">
                                    <CombinedGeometry.Geometry1>
                                        <EllipseGeometry Center="50,50" RadiusX="50" RadiusY="50"></EllipseGeometry>
                                    </CombinedGeometry.Geometry1>
                                    <CombinedGeometry.Geometry2>
                                        <EllipseGeometry Center="50,50 " RadiusX="40" RadiusY="40"></EllipseGeometry>
                                    </CombinedGeometry.Geometry2>
                                </CombinedGeometry>
                            </CombinedGeometry.Geometry1>
                            <CombinedGeometry.Geometry2>
                                <CombinedGeometry>
                                    <CombinedGeometry.Geometry1>
                                        <RectangleGeometry Rect="45,6 10,90 " RadiusX="40" RadiusY="0">
                                            <RectangleGeometry.Transform>
                                                <RotateTransform Angle="90" CenterX="50" CenterY="50">
                                                </RotateTransform>
                                            </RectangleGeometry.Transform>
                                        </RectangleGeometry>
                                    </CombinedGeometry.Geometry1>
                                    <!--<CombinedGeometry.Geometry2>
                                        <RectangleGeometry Rect="45,6 10,90 " RadiusX="40" RadiusY="0">
                                            <RectangleGeometry.Transform>
                                                <RotateTransform Angle="180" CenterX="50" CenterY="50">
                                                </RotateTransform>
                                            </RectangleGeometry.Transform>
                                        </RectangleGeometry>
                                    </CombinedGeometry.Geometry2>-->
                                </CombinedGeometry>
                            </CombinedGeometry.Geometry2>
                             
                        </CombinedGeometry>

                    </Path.Data>
                    <Path.Triggers>
                        <EventTrigger RoutedEvent="Path.Loaded">
                            <BeginStoryboard>
                                <Storyboard RepeatBehavior="Forever" Storyboard.TargetProperty="RenderTransform.Children[0].Angle">
                                    <DoubleAnimation From="0" To="360" Duration="0:0:2"></DoubleAnimation>
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                    </Path.Triggers>
                </Path>
                <Path Stroke="Blue" StrokeThickness="2" Stretch="Fill" Width="136.333" Height="104.666">
                    <Path.Data>
                        <PathGeometry>
                            <PathFigure IsClosed="False" StartPoint="110,120" >
                                <BezierSegment  Point1="200,200" Point2="169,89" Point3="200,200"></BezierSegment>
                            </PathFigure>
                        </PathGeometry>
                    </Path.Data>
                </Path>

                <Button x:Name="btn" Content="asd">
                    <Button.Style>
                        <Style TargetType="Button">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding }"   ></DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Button.Style>
                </Button>
                <Path Data="M 0 0  6 6 12 0 Z"></Path>
                <CheckBox IsChecked="True" Style="{DynamicResource CheckBoxStyle1}"></CheckBox>
                <CheckBox IsChecked="{x:Null}"></CheckBox>
                <Path x:Name="optionMark" Data="M10.23879353 1.70739055 6.81749753 5.12868655 10.18595033 8.49713936 8.49738065 10.18570903 5.12892785 6.81725623 1.70787313 10.023855224 0.00168905 8.53236816 3.42274377 5.11107215 0.05429097 1.74261935 1.74286064 0.05404967 5.11131345 3.42250247 8.53260945 0.00120647 10.23879353 1.70739055 Z" Fill="{StaticResource OptionMark.Static.Glyph}" Margin="1" Opacity="0" Stretch="None"/>
                <TextBox  x:Name="TxtTest" ></TextBox>
                <TreeView  x:Name="TreeTest" Width="240" Height="50" ItemsSource="{Binding ElementName=Base,Path=Phones}">
                    <TreeView.ItemContainerStyle>
                        <Style TargetType="{x:Type TreeViewItem}">
                            <Setter Property="IsExpanded" Value="{Binding IsExpanded, Mode=TwoWay}" />
                            <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}" />
                            <Setter Property="FontWeight" Value="Normal" />
                            <Style.Triggers>
                                <Trigger Property="IsSelected" Value="True">
                                    <Setter Property="FontWeight" Value="Bold" />
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                    </TreeView.ItemContainerStyle>

                    <TreeView.ItemTemplate>
                        <HierarchicalDataTemplate ItemsSource="{Binding Childen}">
                            <StackPanel Orientation="Horizontal">
                                <CheckBox Visibility="{Binding Path=CheckVisiable}" Tag="{Binding}" IsChecked="{Binding Path=IsChecked, Mode=TwoWay}" Click="cxb_Node_Click"  ></CheckBox>
                                <TextBlock x:Name="treeViewItemTB" Text="{Binding Name}" Tag="{Binding ID}"/>
                            </StackPanel>
                        </HierarchicalDataTemplate>
                    </TreeView.ItemTemplate>
                </TreeView>
                <uc:TreeCombox x:Name="cTree" Width="500"></uc:TreeCombox>
            </WrapPanel>
        </Border>

        <!--<ex:HtmlEditor x:Name="Editor"  />-->
        <!--<RichTextBox Width="200" Height="300"></RichTextBox>-->
    </Grid>
</ui1:WindowsBase>
